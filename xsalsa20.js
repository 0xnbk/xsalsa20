
module.exports = loadWebAssembly

loadWebAssembly.supported = typeof WebAssembly !== 'undefined'

function loadWebAssembly (opts) {
  if (!loadWebAssembly.supported) return null

  var imp = opts && opts.imports
  var wasm = toUint8Array('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')
  var ready = null

  var mod = {
    buffer: wasm,
    memory: null,
    exports: null,
    onload: onload
  }

  onload(function () {})

  return mod

  function onload (cb) {
    if (mod.exports) return cb()

    if (ready) {
      ready.then(cb.bind(null, null)).catch(cb)
      return
    }

    try {
      if (opts && opts.async) throw new Error('async')
      setup({instance: new WebAssembly.Instance(new WebAssembly.Module(wasm), imp)})
    } catch (err) {
      ready = WebAssembly.instantiate(wasm, imp).then(setup)
    }

    onload(cb)
  }

  function setup (w) {
    mod.exports = w.instance.exports
    mod.memory = mod.exports.memory && mod.exports.memory.buffer && new Uint8Array(mod.exports.memory.buffer)
  }
}

function toUint8Array (s) {
  if (typeof atob === 'function') return new Uint8Array(atob(s).split('').map(charCodeAt))
  return new (require('buf' + 'fer').Buffer)(s, 'base64')
}

function charCodeAt (c) {
  return c.charCodeAt(0)
}
